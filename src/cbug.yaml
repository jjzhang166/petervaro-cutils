## INFO ##
## INFO ##

#------------------------------------------------------------------------------#
PAGE: 'CBUG Debugging & Logging'

#------------------------------------------------------------------------------#
HEAD:
  FILE: const/head.yaml

#------------------------------------------------------------------------------#
INFO:
  - - h1
    - string: 'CBUG | Debugging and Logging'
  - - br
  - - p
    - string: |
              A very lightweight debugging/logging single header-only utility,
              contains a single function-like macro which can print its
              invocation place, a custom message or a formatted message with
              values to the standard error output.

#------------------------------------------------------------------------------#
USER:
  - FILE: const/name.yaml
    VARS:
      VAR_head: cbug
      VAR_func: debug
#------------------------------------------------------------------------------#
FUNC:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - func: debug
    vargs:
      - - - void
          - ''
      - - - char *
          - message
      - - - char *
          - format_string
        - - ''
          - ...

    info: |
          `debug` has its own internal counter, which is scope based. (This
          means, that each invocaition place's scope has its own counter.)
          This counter increases each time when the function-like macro is
          called. `debug` prints the value of the counter and the location
          informations from where it was called.
          \\n\\n
          `debug` can be called with a single argument, which has to be a
          `char *` string. This message will be indented and printed out after
          the default debugging line.
          \\n\\n
          `debug` also can be called with 2+ arguments (up to 63 in total). In
          this case the first argument has to be a format-string and all the
          other arguments can be any type specified in the format-string. It
          works exactly as the standard library's `printf` function. The
          formatted message will be indented and printed out after the default
          debugging line.

    example:
      - - Calling `debug` in all 3 forms from the main function
        - |
          #include <stdio.h>        /* fprintf(), stderr */
          #include <cutils/cbug.h>  /* debug() */
          \\n
          int main(void)
          {
              for (int i=0; i<3; i++)
              {
                  fprintf(stderr, "- - - - -\n");
                  debug();
                  debug("I'm debugging...");
                  debug("Value of i is: %d", i);
              }
              return 0;
          }
      - - OUTPUT
        - |
          \\OFF
          - - - - -
          000 File: 'main.c', line: 9, function: 'main'
          001 File: 'main.c', line: 10, function: 'main'
              "I'm debugging..."
          002 File: 'main.c', line: 11, function: 'main'
              "Value of i is: 0"
          - - - - -
          003 File: 'main.c', line: 9, function: 'main'
          004 File: 'main.c', line: 10, function: 'main'
              "I'm debugging..."
          005 File: 'main.c', line: 11, function: 'main'
              "Value of i is: 1"
          - - - - -
          006 File: 'main.c', line: 9, function: 'main'
          007 File: 'main.c', line: 10, function: 'main'
              "I'm debugging..."
          008 File: 'main.c', line: 11, function: 'main'
              "Value of i is: 2"
