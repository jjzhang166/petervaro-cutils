## INFO ########################################################################
##                                                                            ##
##                                   cutils                                   ##
##                                   ======                                   ##
##                                                                            ##
##                     Modern and Lightweight C Utilities                     ##
##                       Version: 0.8.96.288 (20141027)                       ##
##                                                                            ##
##                                 File: TODO                                 ##
##                                                                            ##
##   For more information about the project, visit <http://www.cutils.org>.   ##
##                       Copyright (C) 2014 Peter Varo                        ##
##                                                                            ##
##  This program is free software: you can redistribute it and/or modify it   ##
##   under the terms of the GNU General Public License as published by the    ##
##       Free Software Foundation, either version 3 of the License, or        ##
##                    (at your option) any later version.                     ##
##                                                                            ##
##    This program is distributed in the hope that it will be useful, but     ##
##         WITHOUT ANY WARRANTY; without even the implied warranty of         ##
##            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.            ##
##            See the GNU General Public License for more details.            ##
##                                                                            ##
##     You should have received a copy of the GNU General Public License      ##
##     along with this program, most likely a file in the root directory,     ##
##        called 'LICENSE'. If not, see <http://www.gnu.org/licenses>.        ##
##                                                                            ##
######################################################################## INFO ##

#---------------------------- 19 POSTS IN 10 FILES ----------------------------#
FIXME:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 1
  - file: doc/src/05_ccom.yaml
    line: 104
    note: |
          We need to use the String
          "object" of cutils here
          instead of this simple struct

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 2
  - file: internal/generator.py
    line: 295
    note: |
          better guard ending and meaningful comment

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 3
  - file: internal/generator.py
    line: 472
    note: |
          getting 'default' key will raise KeyError even if
          'subtype_name' is in 'func_wrapping' !!!

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 4
  - file: internal/singly_linked_list.py
    line: 203
    note: |
          try to make both find and findall type-safe
          by replacing the const void* to type specific pointer
          the main problem is, cannot pass
          bool(*)(const type*,...) --> bool(*)(const void*,...)

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 5
  - file: pycutils/cutils/cdoc.py
    line: 146
    note: |
          replace newline only if newline character is
          the first token in that line or it is after
          a similar token (prevent: \\\n)

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 6
  - file: pycutils/cutils/cdoc.py
    line: 263
    note: |
          if external file changed -> change the whole file
          check for all special features and find out how
          to store them properly in the cache files

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 7
  - file: internal/c11.py
    line: 458
    note: |
          define __paste(_0,_1,_2,_3,_4) _0##_1##_2##_3##_4
                                              ^
                                   highlighted as number

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 8
  - file: internal/c11.py
    line: 462
    note: |
          some_var, ## \   <-- line-breaker
          amother_var

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 9
  - file: internal/c11.py
    line: 602
    note: |
          format prefixes: -= 0w.pmc

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 10
  - file: build/lib/cutils/ccom.py
    line: 184
    note: |
          for some reason, if a comment-type ever existed in the TODO
          file, but after a while its posts are all gone, the keyword
          still remains there, according to the current TODO file,
          which still have the "QUESTIONS" keyword, and comment

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 11
  - file: build/lib/cutils/cdoc.py
    line: 146
    note: |
          replace newline only if newline character is
          the first token in that line or it is after
          a similar token (prevent: \\\n)

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 12
  - file: build/lib/cutils/cdoc.py
    line: 263
    note: |
          if external file changed -> change the whole file
          check for all special features and find out how
          to store them properly in the cache files

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 13
  - file: build/lib/cutils/clic.py
    line: 44
    note: |
          if modules cannot be found?

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 14
  - file: build/lib/cutils/clic.py
    line: 211
    note: |
          what if none of the files changed only INFO has been updated?
          Scan through all files and folders

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 15
  - file: build/lib/cutils/clic.py
    line: 236
    note: |
          make it more generic than ./ -- what if ../../?

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 16
  - file: pycutils/cutils/clic.py
    line: 44
    note: |
          if modules cannot be found?

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 17
  - file: pycutils/cutils/clic.py
    line: 211
    note: |
          what if none of the files changed only INFO has been updated?
          Scan through all files and folders

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 18
  - file: pycutils/cutils/clic.py
    line: 236
    note: |
          make it more generic than ./ -- what if ../../?

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 19
  - file: pycutils/cutils/ccom.py
    line: 184
    note: |
          for some reason, if a comment-type ever existed in the TODO
          file, but after a while its posts are all gone, the keyword
          still remains there, according to the current TODO file,
          which still have the "QUESTIONS" keyword, and comment



#----------------------------- 6 POSTS IN 3 FILES -----------------------------#
HACK:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 1
  - file: etc/cutils_modern_api.c
    line: 101
    note: |
          the re-casting of the pointers is a dirty but useful hack which is
          needed to set the assignment-expression to a function call instead of
          the function name itself. If re-casting is not added, the code will
          also work, however the compiler will generate 2 warnings.
          more info: http://stackoverflow.com/questions/24743520 

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 2
  - file: internal/generator.py
    line: 82
    note: |
          Make this 'first_arg' type detection smarter...

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 3
  - file: internal/generator.py
    line: 229
    note: |
          even uglier, dirtier and filthier then the other hack below..

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 4
  - file: internal/generator.py
    line: 378
    note: |
          this is a dirty and filthy hack, just to make this
          supported-method system work. fixit ASAP!

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 5
  - file: internal/generator.py
    line: 412
    note: |
          Because of the unordered nature of a dictionary, if
          'SUPPORTED' will be processed first and 'SUPPORT_n'
          (function.supported) later, then the output will never
          be formatted properly. To solve this undeterministic bug,
          'SUPPORTED' is formatted directly here. Solve this!!!

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 6
  - file: makefile
    line: 122
    note: |
          cp -f internal/static_hash_map.h cshm.h



#----------------------------- 7 POSTS IN 5 FILES -----------------------------#
NOTE:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 1
  - file: internal/xxhash.c
    line: 141
    note: |
          although _rotl exists for minGW (GCC under windows), performance seems poor

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 2
  - file: csll.c
    line: 1340
    note: |
          maybe rename const void *item --> const void *target ?
          if it will be done, do the same in DynamicArray methods as well 

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 3
  - file: csll.c
    line: 1487
    note: |
          If the list is modified directly or through another iterator, while
          there is an iterator already created, it will lead to undefined
          behaviour, as the 'next' pointer will most likely point to a deleted
          node. An example:
          
              SinglyLinkedList_type_iterator *i1 = iter(list);
              SinglyLinkedList_type_iterator *i2 = iter(list);
              next(i1);
              pull(i1);
              next(i2);
          
          If possible, solve this. One option is to create a virtual-pointer
          array inside the list object, and the nodes are going to point to the
          entries of the this array, instead of directly pointing to each other.
          However this is a working solution, this will make the linked-list
          super heavy, probably unnecessarily heavy. 

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 4
  - file: doc/src/00_cutils.yaml
    line: 32
    note: |
          Timing: 1) CCOL
                  2) update doc -> menu: fork me, etc.

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 5
  - file: doc/src/05_ccom.yaml
    line: 100
    note: |
          length of the char
          array stored in string 

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 6
  - file: internal/singly_linked_list.c
    line: 1350
    note: |
          maybe rename const void *item --> const void *target ?
          if it will be done, do the same in DynamicArray methods as well 

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 7
  - file: internal/singly_linked_list.c
    line: 1497
    note: |
          If the list is modified directly or through another iterator, while
          there is an iterator already created, it will lead to undefined
          behaviour, as the 'next' pointer will most likely point to a deleted
          node. An example:
          
              SinglyLinkedList_type_iterator *i1 = iter(list);
              SinglyLinkedList_type_iterator *i2 = iter(list);
              next(i1);
              pull(i1);
              next(i2);
          
          If possible, solve this. One option is to create a virtual-pointer
          array inside the list object, and the nodes are going to point to the
          entries of the this array, instead of directly pointing to each other.
          However this is a working solution, this will make the linked-list
          super heavy, probably unnecessarily heavy. 



#----------------------------- 5 POSTS IN 5 FILES -----------------------------#
ALERT:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 1
  - file: capi.h
    line: 632
    note: |
          D O N ' T   R E M O V E   T H E   N E X T   C O M M E N T !!! 

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 2
  - file: internal/dynamic_array.h
    line: 30
    note: |
          DON NOT ADD GUARD TO THIS FILE !!! 

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 3
  - file: internal/singly_linked_list.h
    line: 30
    note: |
          DON NOT ADD GUARD TO THIS FILE !!! 

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 4
  - file: internal/static_hash_map.h
    line: 30
    note: |
          DON NOT ADD GUARD TO THIS FILE !!! 

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # 5
  - file: cshm.h
    line: 30
    note: |
          DON NOT ADD GUARD TO THIS FILE !!! 


