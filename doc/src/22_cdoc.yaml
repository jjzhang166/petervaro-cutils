## INFO ########################################################################
##                                                                            ##
##                                   cutils                                   ##
##                                   ======                                   ##
##                                                                            ##
##                     Modern and Lightweight C Utilities                     ##
##                       Version: 0.8.72.465 (20140713)                       ##
##                                                                            ##
##                         File: doc/src/22_cdoc.yaml                         ##
##                                                                            ##
##           Designed and written by Peter Varo. Copyright (c) 2014           ##
##             License agreement is provided in the LICENSE file              ##
##                 For more info visit: http://www.cutils.org                 ##
##                                                                            ##
######################################################################## INFO ##

#------------------------------------------------------------------------------#
PAGE: CDOC Documenting Tool
NAME: cdoc

#------------------------------------------------------------------------------#
HEAD:
  FILE: const/head.yaml

#------------------------------------------------------------------------------#
INFO:
  - - h1
    - string: CDOC | Documenting Tool
  - - br
  - - p
    - string: |
              This tiny little utility called `cdoc` is very handy when one has
              to write documentations manually, which is sometimes the preferred
              way over generating it.
  - - br
  - - p
    - string: |
              It is very flexible as it is working on two basic Python data
              structures: dictionaries and lists. Therefore basically anything
              that can be parsed and tokenised into these structures can be used
              to feed to `cdoc` and create the documentation. So for example it
              can be XML, JSON or YAML too or any other custom markup languages,
              however when the script is not used as a module, by default it is
              looking for and will try to parse YAML files.
  - - br
  - - p
    - string: |
              Either way, the only thing that matters, is that it has a certain
              schema which is discribed in this document.
  - - br
  - - p
    - string: 'The basic and default layout of the page looks like this:'

  - - br
  - - pre
    - - code
      - string: |
                +------+----------------+
                | HEAD |     INFO       |
                +------+----------------+
                |      |                |
                | MENU |                |
                | USER |    USER &      |
                | TYPE |  TYPE & FUNC   |
                | FUNC |                |
                |      |                |
                +------+----------------+
                \\n
                HEAD : (html)   : logo, slogen, other constant stuff
                INFO : (html)   : introduction, explanations, summary, etc.
                MENU : (html)   : external links, dynamic stuffs
                USER : (schema) : user defined features, eg.: compiler flags
                TYPE : (schema) : type definitions, aliases, etc.
                FUNC : (schema) : function prototypes and macros

#------------------------------------------------------------------------------#
USER:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - - Dependencies
    - FILE: const/python.yaml
    - FILE: const/pyhash.yaml
      VARS:
        VAR_module: cdoc
    - name: pyyaml
      info: >
            `cdoc` uses `pyyaml` heavily to process all the doc files written in
            `YAML`. Of course, if one is using `cdoc` as a
            [Python module](#func_cdoc_document) and not as a Command Line Tool,
            and one may use other markup languages, such as `JSON` for example,
            then `pyaml` won't be necessary to have.
            \\n\\n
            It is highly recommended to use `libYAML` as the backend of
            `pyyaml`, although `cdoc` can work properly without it (but it will
            be way slower).
      examples:
        CALL: ''
      '':
        - - Install `pyyaml`
          - \\OFFpip3 install pyyaml
    - name: beautifulsoup4
      info: >
            `cdoc` uses `beautifulsoup4` to build and maintain the generated
            `HTML` content.
            \\n\\n
            It is highly recommended to use `lxml` as the backend of
            `beautifulsoup4`, although `cdoc` can work properly without it (but
            it will be way slower).
      examples:
        CALL: ''
      '':
        - - Install `beautifulsoup4`
          - \\OFFpip3 install beautifulsoup4
        - - Install `lxml`
          - \\OFFpip3 install lxml
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - - usage
    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    - name: Command Line Tool
      info: |
            `cdoc` is a command line utility, which takes two arguments: the
            folder which includes all the markup files, and the destination
            folder where the output will be generated to.
      examples:
        - - note
          - \\OFF$ python3 cdoc.py proj/doc/src proj/doc

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - - generic keys
    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    - name: 'PAGE: Table of Content'
      info: >
            The `PAGE` key in the root dictionary will be the name that appears
            in the side-bar's table of content section.
      examples:
        - - This can has only a single string
          - |
            \\OFF
            PAGE: Section in SideBar

    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    - name: 'NAME: Custom file name'
      info: >
            Since the TOC is generated by the sorted order of the files in the
            source directory, it is sometimes preferred to rename the output
            file to get a special purpose name, like `index.html`. Therefore
            a specail `NAME` key can be added to the root dictionary, which
            containes a single string, the preferred filename without extension.
            If `NAME` is not provided the source's file name will be used.
      examples:
        - - >
            In this example, although the original file name is
            `_firstpage.yaml` the output will be named as `index.html`
          - |
            \\OFF
            NAME: index

    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    - name: 'INFO: brief, summary, about'
      info: 'Generic HTML data, same as `HEAD`'

    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    - name: 'MENU: extra control'
      info: 'Generic HTML data, same as `HEAD`'

    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    - name: 'HEAD: branding, constants'
      info: |
            There are two ways to use the HTML templates, which are the `HEAD`,
            the `INFO` and the `USER` keys in the root dictionary. One way, is
            to "import" an external HTML file, which is preferred when the
            markup is complex. The other way is to write the HTML with lists and
            dictionaries, which is recommended when the markup is simple and
            short, so the documentation won't have another external file
            dependency.

      examples:
        - - >
            The following example implements how to import an external HTML file
            using YAML
          - |
            \\OFF
            INFO:
              HTML: relative/path/to/my_file.html

        - - |
            The other possibility is to use a special data structure to
            "emulate" and build HTML structure. All the tags are lists, and
            their first item is the tag-name. All the other items can be other
            child tags (other lists) or dictionaries, which are containing the
            attributes of the tag.
            \\n\\n
            There is only one special attribute in the dictionary of a tag, it
            is called `string` which is basically the raw text between the
            opening and the closing tags.
            \\n\\n
            The following example shows a basic markup implemented in YAML
          - |
            \\OFF
            INFO:
              - - h1
                - string: Sample Header Text
              - - br
              - - p
                - id: text
                  class: foo bar
                  string: This is a sample text
              - - pre
                - class: programming_language
                - - code
                  - string: |
                            And this is a nested tag, the code tag is inside the
                            \\N
                            pre tag. Also this is a multiline text in YAML.

        - - which will produce this HTML output
          - |
            \\OFF
            <h1>Sample Header Text</h1>
            <br />
            <p id="text" class="foo bar">This is a sample text</p>
            <pre class="programming_language">
              <code>And this is a nested tag, the code tag is inside the pre tag.
            Also this is a multiline text in YAML.</code>
            </pre>

    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    - name: 'FILE: include'
      info: |
            `FILE` is a special keyword, which can be used anywhere in the
            markup file. It may contain only a single string which is a relative
            path to a file written in the given markup language. `FILE` will
            replace the dictionary containing this keyword with the parsed and
            tokenised objects from the file it was pointing at.
            \\n\\n
            The dictionary `FILE` is in can also contain another dictionary
            under the `VARS` key. In `VARS` all keys have to be strings and
            these are the variable names, and their value pairs are the values
            they are representing. When the file described in `FILE` is read all
            variable names described in `VARS` will be replaced with their
            values.
      examples:
        - - >
            This is a constant header file, placed in `const` folder and called
            `header.yaml`
          - |
            \\OFF
            - - h1
              - string: LIBRARY
            - - p
              - string: Best library ever!

        - - This is one of the files using this header file
          - |
            \\OFF
            HEAD:
              FILE: const/header.yaml

        - - >
            Another example is, when `section.yaml` in `const` folder looks
            something like this
          - |
            \\OFF
            - Section
            - name: Some Special Feature
              info: This is a very special feature
        - - >
            And it is used in the user-defined section with other page specific
            data already in the document
          - |
            \\OFF
            USER:
              - FILE: const/section.yaml
              - - Another Section
                - name: A Very Specific Feature
                  info: You definitely need this

        - - >
            A template called `var_section.yaml` in the `const` folder
            containing variables, which all start with the shortend `VAR_`,
            although one can use any special characters, such as `$` or
            any other tokens to make the variable name unique in the file
          - |
            \\OFF
            - VAR_head
            - name: VAR_name
              info: VAR_info

        - - >
            Importing the file and providing values to the variables
          - |
            \\OFF
            USER:
              - FILE: const/var_section.yaml
                VARS:
                  VAR_head: Section Header
                  VAR_name: Feature name
                  VAR_info: Information about this feature
              - - Static Section
                - name: This is already here
                  info: and won't be affected

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - - schemas
    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    - name: 'USER: user defined'
      info: |
            In some situations using the type and function schemas are not
            enough or maybe too strict, therefore one can use the so called
            user-defined schema. A special key called `USER` has to be defined,
            and then any number of "sections" can be added. Also a section can
            take any number of features.
            \\n\\n
            This can be very useful, when one wants to document compiler flags,
            command line options, special use-cases, etc. (This exact page is
            using the user defined schema)
            \\n\\n
            But in some situations, the "Examples" name is not the best choice
            to use, therefore the `examples` key can be renamed, with the `CALL`
            keyword, as showed in the last example.

      examples:
        - - The user defined definitions schema template
          - |
            \\OFF
            # "USER" key is in the root dictionary
            USER:
              - - <section name>
                \\n
                - name: <feature name>
                  \\n
                  info: <feature brief>
                  \\n
                  # OPTIONAL:
                  examples:
                    - - <example note>
                      - <example code>
                    \\n
                    # ... any number of examples
                \\n
                # ... any number of features
              \\n
              # ... any number of sections

        - - An example implemented in YAML
          - |
            \\OFF
            USER:
              - - Format Strings
                \\n
                - name: integer
                  info: >
                        string representation of `int` type,
                        format strings: `%d` or `%i`
                  examples:
                    - - Used with `printf()`
                      - |
                        int i = 12, j = 9;
                        printf("%d and %i\n", i, j);
                \\n
                - name: string
                  info: >
                        string representation of `char *` type,
                        format string: `%s`
                  examples:
                    - - Used with `fprintf()`
                      - |
                        const char *msg = "Something went wrong...";
                        fprintf(stderr, "ERROR: %s\n", msg);

        - - Renaming "Examples" to "Notes"
          - |
            \\OFF
            USER:
              - - Stuff
                - name: black magic
                  info: This is something very unusual
                  examples:
                    CALL: notes
                  notes:
                    - - This is pure magic, use it well
                      - Abracadabra();

    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    - name: 'TYPE: type definitions'
      info: |
            The type schema is ideal to document typedefs, unions, enums or
            structs types.
            `original`: Optional -- if this is typedef alias or related to a basic type
      examples:
        - - The type definitions schema template
          - |
            \\OFF
            # "TYPE" key is in the root dictionary
            TYPE:
              - type: <type name>
                \\n
                # OPTIONAL:
                original: <type related to>
                \\n
                # OPTIONAL:
                members:
                  - - <member type>
                    - <member name>
                  \\n
                  # ... any number of members
                \\n
                info: <brief>
              \\n
              # ... any number of types

        - - An example implemented in YAML
          - |
            \\OFF
            TYPE:
              - type: errno_t
                original: int
                info: |
                      Although `errno_t` is not part of the standard it is used
                      in several project to indicate error signals. Under the
                      hood it is a `typedef`'d `int`.
              - type: uint8_t
                original: unsigned char
                info: |
                      Smallest unsigned integer type. Part of `stdint.h` (since
                      `C99`), it is a `typedef`'d `unsigend char`.

    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    - name: 'FUNC: function definitions'
      info: |
            The function schema is designed to fit both function and
            function-like macro documentations. It even has a `vargs` key —
            which is optional — and can handle, if a macro calls different
            functions based on the number of arguments, or it is a `_Generic`
            macro, which will call different functions based on the type of the
            arguments. If `vargs` is provided, `args` will be skipped. If no
            `args` provided the function will take no arguments.
            \\n\\n
            The `return` key's first list's first value is the return type, this
            is not optional, all other values are. This key can be used to
            list possible return values of a function, and add comments on each
            of the possible return values.
            \\n\\n
            The `exceptions` key is useful to document if the function is using
            an excpetion handler system, such as `cexc` in `cutils` or simply
            printing warnings on the screen. Each message has a comment block
            too, to explain the possible errors it means.
            \\n\\n
            But in some situations, the "Exceptions" and the "Examples" names
            are not the best choice to use, therefore the `exceptions` key
            and the `examples` key can be renamed, with the `CALL` keyword, as
            showed in the last example.
      examples:
        - - ..
          - |
            \\OFF
            FUNC:
              - func: <function name>
                \\n
                # OPTIONAL:
                vargs:
                  - - - <argument type>
                      - <argument name>
                      # OPTIONAL
                      - <argument rest>
                    \\n
                    # ... any number of arguments
                  \\n
                  # ... any number of variants
                \\n
                # OPTIONAL:
                args:
                  - - <type of argument>
                    - <name of argument>
                  \\n
                  # ... any number of arguments
                \\n
                # OPTIONAL: if none provided -> void
                return:
                  - - <type of return value>
                    - <note on type of return value>
                  # OPTIONAL:
                  - - <posibble return value>
                    - <note on possible return value>
                  \\n
                  # ... any number of possibilities
                \\n
                info: <brief>
                \\n
                # OPTIONAL:
                exceptions:
                  - - <exception text>
                    - <exception info>
                  \\n
                  # ... any number of exceptions
                \\n
                # OPTIONAL:
                examples:
                  - - <example note>
                    - <example code>
                  \\n
                  # ... any number of examples
              \\n
              # ... any number of functions

        - - An example implemented in YAML
          - |
            \\OFF
            FUNC:
              - func: memcpy
                args:
                  - - void *
                    - destination
                  - - const void *
                    - source
                  - - size_t
                    - number
                return:
                  - - void *
                info: Copies `number` of characters from `source` to `destination`
                examples:
                  - - >
                      Copy second and third values from `src` array of `float`s
                      to `dst` array of `float`s with `memcpy()`
                    - |
                      // Declare/Define variables
                      float src[] = {1.f, 2.f, 3.f};
                      #define SIZE 2
                      float dst[SIZE];
                      \\n
                      // Copy values
                      memcpy(dst, src + 1, SIZE * sizeof(float));
                      \\n
                      // Print values of src
                      for (size_t i=0; i<SIZE; i++)
                          printf("dst[%zu] %.2f\n", i, dst[i]);

        - - An example of function pointer argument and an array argument
          - |
            \\OFF
            FUNC:
              - func: set_callback
                args:
                  - - void*(*
                    - function
                    - )(char*, size_t)
                  - - size_t
                    - array
                    - []
                info: Set callback function and do something with the array


        - - Renaming `exceptions` key to something more meaningful
          - |
            \\OFF
            FUNC:
              - func: myfunc
                info: it will do things, and print warnings
                exceptions:
                  CALL: warnings
                warnings:
                  - - I warned you!
                    - This is a serious warning
                  - - Do I have to warn you again?
                    - It is time to take the warnings seriously

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - - special syntax
    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    - name: markdown
      info: |
            `cdoc` supports a small subset of the markdown language in any
            non-code block string. Here is the supported syntax:
            \\n\\n
            ``code`` : `monospace expression`\\n
            `*italic*` : *italic text*\\n
            `**bold**` : **bold text**\\n
            `***bold+italic***` : ***bold and italic***\\n
            `[link](address)` : [link](#user_markdown)\\n
            `![alt text](img/cutils.svg 'cutils logo')` :\\n\\n
            ![alt text](img/cutils.svg 'cutils logo')
            \\n\\n
            ***Note:*** *With the link-syntax one can easily create inline anchor
            references. There are only 3 special types available, `USER`, `FUNC`
            and `TYPE`, the references to these sections are generated
            auromatically, with replacing every non-word character to `_`
            (underscore) and added a `user_`, `func_` or `type_` respectively to
            the name of the secion*
      examples:
        - - >
            In the next example a function called `hello world` is created and
            the description of a macro variable called `FLAG` is pointing back
            to the description of this function
          - |
            \\OFF
            FUNC:
              - func: hello world
                info: hello world function
            USER:
              - - Features
                - name: FLAG
                  info: Change behavior of [hello world()](#func_hello_world)

    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    - name: \\n
      info: |
            The `\\n` is a so-called "white-space-free" new-line character.
            Although everyone loves YAML for its readability — thanks to its
            white-space based indentation syntax — but sometimes this could be a
            a real disadvantage too. There are situation when one wants to
            indicate explicitly the presence of a new-line. For example, if
            the text-editor of one has the "remove trailing white spaces"
            feature turned on, it would be literally impossible to place a
            new-line into the multi-line text. That's why `cdoc` provides the
            `\\n`.
            \\n\\n
            In a code-block it will be treated as a new-line in the string. In
            a normal paragraph a `<br />` will be added.
            \\n\\n
            It also has an escaped version, which is: `\\N`

    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    - name: \\OFF
      info: |
            By default `cdoc` is using a mini C parser to tokenise the code
            blocks, so they can be syntax highlighted with various CSS classes.
            As `cdoc` is designed specially for documenting C code, this is a
            nice feature, but sometimes one wants to use the code blocks to
            demonstrate the ouput of a program, or to write code in different
            languages. Therefore if `\\OFF` is used as the first token in a
            string literal which otherwise supposed to a be a C code block, the
            syntax highlighting (and the whole parsing) will be turned off and
            skipped.
      examples:
        - - Used in a single line code
          - |
            \\OFF
            examples:
              - - Python functional approach
                - \\OFFmap(lambda x: x**2, range(10))

        - - Used in multi-line code
          - |
            \\OFF
            examples:
              - - Python function definition
                - |
                  \\OFF
                  def function(x, y):
                      print("x:", x, "y:", y)

#------------------------------------------------------------------------------#
FUNC:
    - func: cdoc.document
      args:
        - - str
          - infolder
        - - str
          - outfolder
        - - callable
          - loader
        - - str
          - extension
        - - bool
          - generate_toc=None
      return:
        - - None

      info: |
            If a different markup language is preferred over YAML, one can use
            the `cdoc.document()` function, when using `cdoc` as a module
            instead of a command line tool. This function will produce the HTML
            outputs if it gets the proper input data.
            \\n\\n
            The `generate_toc` has a default value `None`. If value passed to
            this parameter the default behavior is to generate table of content
            only if there are more than one documents available for converting.

      examples:
        - - >
            Generate HTML documentation files into `doc` folder from the
            JSON files in `doc/src` folder
          - |
            \\OFF
            from json import load
            from cdoc import document
            \\n
            # Create HTML pages and generate table of content if
            # there is more than one document will be created
            document(infolder='doc/src',
                     outfolder='doc',
                     extension='.json',
                     loader=load)
