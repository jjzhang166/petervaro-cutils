## INFO ########################################################################
##                                                                            ##
##                                   cutils                                   ##
##                                   ======                                   ##
##                                                                            ##
##                     Modern and Lightweight C Utilities                     ##
##                       Version: 0.8.95.823 (20140828)                       ##
##                                                                            ##
##                        File: doc/src/00_cutils.yaml                        ##
##                                                                            ##
##   For more information about the project, visit <http://www.cutils.org>.   ##
##                       Copyright (C) 2014 Peter Varo                        ##
##                                                                            ##
##  This program is free software: you can redistribute it and/or modify it   ##
##   under the terms of the GNU General Public License as published by the    ##
##       Free Software Foundation, either version 3 of the License, or        ##
##                    (at your option) any later version.                     ##
##                                                                            ##
##    This program is distributed in the hope that it will be useful, but     ##
##         WITHOUT ANY WARRANTY; without even the implied warranty of         ##
##            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.            ##
##            See the GNU General Public License for more details.            ##
##                                                                            ##
##     You should have received a copy of the GNU General Public License      ##
##     along with this program, most likely a file in the root directory,     ##
##        called 'LICENSE'. If not, see <http://www.gnu.org/licenses>.        ##
##                                                                            ##
######################################################################## INFO ##

# TODO: consider changing `clic` -> `ccom` and `ccom` -> `ctag`

# NOTE: Timing: 1) CCOL
#               2) update doc -> menu: fork me, etc.

#------------------------------------------------------------------------------#
PAGE: CUTILS
NAME: index

#------------------------------------------------------------------------------#
HEAD:
  FILE: const/head.yaml

#------------------------------------------------------------------------------#
INFO:
  - - h1
    - string: 'C Utilities'
  - - br
  - - p
    - class: info
    - string: |
              `cutils` *(C Utilities)* is a collection of simple, modern and
              truly powerful tools to make one's life a little easier when
              programming in C. The utilities were created mostly to fulfill the
              personal needs of the author, however he hopes and believes many
              will find the tools just as useful and essential as he does.
  - - br
  - - p
    - class: info
    - string: |
              **The current version is 0.8.96, which can be downloaded from the
              [GitHub Repository](http://github.com/petervaro/cutils) of the
              project.**
  - - br
  - - p
    - class: info
    - string: |
              **W A R N I N G!** `cutils` is under heavy development, although
              it is regularly tested under Windows, Mac OS and Linux as well.
              But it is very likely that some of the features are not or poorly
              documented (example: they have been updated, since the last time
              the documentation had been written), so if possible, always check
              the source along with the documentation. The status of the project
              can be seen in the following progress-bars:
  - - br
  - - img
    - alt: progress bars
    - title: project progress
    - src: img/progress.svg
    - style: 'display: inline; padding-left: 24pt; padding-bottom: 24pt;'

#------------------------------------------------------------------------------#
TEXT:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - - Getting Started
    - section: Dependencies
      text: |
            To setup and use cutils, you will need a C compiler which supports
            the C11 standard and a Python 3.4.1+ installation.

    - section: Setup/Configure
      text: |
            To use the tools of `cutils`, you have to configure the `makefile`
            of the project. It is a quite easy thing to do, all you have to do
            is set eight variables and that is all.
            \\n\\n
            The usage of the first four variables are pretty self explanatory:
            if you want one of the options to be active -- for convenience -- a
            `true` value needs to be set to the variable.
            \\n\\n
            `IS_OPTIMISED` means, that all the bound-checkings, exception
            handlings, and *extra* features will be turned off, and the library
            will be be compiled at `-O3` optimisation level.
            \\n\\n
            `USE_JEMALLOC` means, that `cutils` will use `jemalloc` (it is a 3rd
            party dependency, you have to install it separately) during all the
            memory allocation processes the library has.
            \\n\\n
            `EXCEPTION_LOG` means, that the raised exceptions won't be stored
            separately in the handler object and won't be available through the
            calling of the `catch` function, instead all exceptions right after
            they had been raised will be written to the file-stream defined by
            the `start_exception_handling` function.
            \\n\\n
            `DYNAMIC_LIB` means, that a `.dll` on Windows, a `.dylib` on a Mac
            and a `.so` on a Linux dynamic library will be compiled instead of
            the static object archive (`.a`).
            \\n\\n
            *Example configuration:*
      code: |
            \\OFF
            IS_OPTIMISED=
            USE_JEMALLOC=true
            EXCEPTION_LOG=true
            DYNAMIC_LIB=

    - text: |
            The following variables will set the places where the header files
            and libraries will be copied. Also specifies where the command-line
            tools will be copied (sym-linked).
            \\n\\n
            *Example configuration:*
      code: |
            \\OFF
            INCLUDE_FOLDER=/usr/local/include
            LIBRARY_FOLDER=/usr/local/lib
            BINARY_FOLDER=/usr/local/bin

    - text: |
            The following variables will set which compiler and which python
            executable to use to build `cutils`.
            \\n\\n
            *Example configuration:*
      code: |
            \\OFF
            CC=gcc
            PYTHON=/usr/local/bin/python3

    - section: Install
      text: >
            Now, that everything is setup, there is only one step left: invoke
            the `makefile`. On some sytems you may need `super-user` privileges,
            so you have to use the `sudo` before the commands if the system is
            complaining about permissions.
      code: |
            \\OFF
            $ make
            $ make install

    - section: Create environment
      text: |
            If everything went fine, not only the modules and libs, but also all
            the command line utilities were installed as well. To test if that
            is true, you have to navigate to your `Documents` folder (or any
            other folder you prefer to build a project in) and run the following
            commands:
      code: |
            \\OFF
            $ cenv my_test_env my_test -cutils
            $ cd my_test_env

    - section: Write test
      text: >
            Now you can open `my_test.c` inside the `my_test_env` folder with
            your favourite text-editor of choice. Replace the automatically
            generated code block with the following lines:
      code: |
            #include <stdio.h>        /* stdout */
            #define CEXC_SET
            #include <cutils/call.h>
            \\n
            int main(void)
            {
                start_exception_handling(stdout);
                \\n
                DynamicArray_char_ptr *dynarr;
                new(&dynarr, 3, ((char*[]){"The best way to predict the"
                                           " future is to invent it.",
                                           "--", "Alan Kay"}));
                \\n
                for (size_t i=0; i<len(dynarr); i++)
                    debug("%s\n", get(dynarr, i));
                \\n
                del(dynarr);
                stop_exception_handling();
                \\n
                return 0;
            }

    - section: Run test
      text: |
            Now you can run this code with the generated `makefile`:
      code: |
            \\OFF
            $ make
            $ ./build/my_test

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - - Important notes
    - section: Error signals
      text: |
            Why the error-signal of functions on success is a value that can be
            evaluated to 'true' and if 'false' if failes? Wouldn't it be easier
            to write the explicit error checking like:
      code: if (some_method) return EXIT_FAILURE;

    - text: 'instead of:'
      code: if (!some_method) return EXIT_FAILURE;

    - text: |
            1) Most of the container-manipulation methods return the number
            of items they have manipulated, which evaluates to 'true' on success
            and 'false' on fail. So it makes more convenient and straightforward
            to use this kind of pattern in all cutils functions and methods
            \\n\\n
            2) it is more intuitive to return 'false' on failure than 'true'

#------------------------------------------------------------------------------#
USER:
  - - About
    - name: LICENSE
      info: |
            Keep calm, `cutils` is and always will be a free software.
            \\n\\n
            Modern and Lightweight C Utilities
            Copyright (C) 2014 Peter Varo
            \\n\\n
            This program is free software: you can redistribute it and/or modify
            it under the terms of the GNU General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
            \\n\\n
            This program is distributed in the hope that it will be useful, but
            WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
            GNU General Public License for more details.
            \\n\\n
            You should have received a copy of the GNU General Public License
            along with this program, most likely a file in the root directory,
            called 'LICENSE'. If not, see <http://www.gnu.org/licenses>.
