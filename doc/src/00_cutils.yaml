## INFO ########################################################################
##                                                                            ##
##                                   cutils                                   ##
##                                   ======                                   ##
##                                                                            ##
##                     Modern and Lightweight C Utilities                     ##
##                       Version: 0.8.90.762 (20140822)                       ##
##                                                                            ##
##                        File: doc/src/00_cutils.yaml                        ##
##                                                                            ##
##           Designed and written by Peter Varo. Copyright (c) 2014           ##
##             License agreement is provided in the LICENSE file              ##
##                 For more info visit: http://www.cutils.org                 ##
##                                                                            ##
######################################################################## INFO ##

# TODO: consider changing `clic` -> `ccom` and `ccom` -> `ctag`

# NOTE: Timing: 1) CCOL
#               2) update doc -> menu: fork me, etc.

#------------------------------------------------------------------------------#
PAGE: CUTILS
NAME: index

#------------------------------------------------------------------------------#
HEAD:
  FILE: const/head.yaml

#------------------------------------------------------------------------------#
INFO:
  - - h1
    - string: 'C Utilities'
  - - br
  - - p
    - class: info
    - string: |
              `cutils` *(C Utilities)* is a collection of simple, modern and
              truly powerful tools to make one's life a little easier when
              programming in C. The utilities were created mostly to fulfill the
              personal needs of the author, however he hopes and believes many
              will find the tools just as useful and essential as he does.
  - - br
  - - p
    - class: info
    - string: '**Current version:** `0.8.90`'
  - - br
  - - p
    - class: info
    - string: |
              `cutils` is under heavy development, although it is regularly
              tested under Windows, Mac OS and Linux as well. The status of the
              project can be seen in the following progress-bars:
  - - br
  - - img
    - alt: progress bars
    - title: project progress
    - src: img/progress.svg
    - style: 'display: inline; padding-left: 24pt; padding-bottom: 24pt;'

#------------------------------------------------------------------------------#
TEXT:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - - Getting Started
    - section: Setup/Configure
      text: |
            To use the tools of `cutils`, you have to configure the `makefile`
            of the project. It is a quite easy thing to do, all you have to do
            is set eight variables and that is all.
            \\n\\n
            The usage of the first four variables are pretty self explanatory:
            if you want one of the options to be active -- for convenience -- a
            `true` value needs to be set to the variable.
            \\n\\n
            `IS_OPTIMISED` means, that all the bound-checkings, exception
            handlings, and *extra* features will be turned off, and the library
            will be be compiled at `-O3` optimisation level.
            \\n\\n
            `USE_JEMALLOC` means, that `cutils` will use `jemalloc` (it is a 3rd
            party dependency, you have to install it separately) during all the
            memory allocation processes the library has.
            \\n\\n
            `EXCEPTION_LOG` means, that the raised exceptions won't be stored
            separately in the handler object and won't be available through the
            calling of the `catch` function, instead all exceptions right after
            they had been raised will be written to the file-stream defined by
            the `start_exception_handling` function.
            \\n\\n
            `DYNAMIC_LIB` means, that a `.dll` on Windows, a `.dylib` on a Mac
            and a `.so` on a Linux dynamic library will be compiled instead of
            the static object archive (`.a`).
            \\n\\n
            *Example configuration:*
      code: |
            \\OFF
            IS_OPTIMISED=
            USE_JEMALLOC=true
            EXCEPTION_LOG=true
            DYNAMIC_LIB=

    - text: |
            The following variables will set the places where the header files
            and libraries will be copied. Also specifies where the command-line
            tools will be copied (sym-linked).
            \\n\\n
            *Example configuration:*
      code: |
            \\OFF
            INCLUDE_FOLDER=/usr/local/include
            LIBRARY_FOLDER=/usr/local/lib
            BINARY_FOLDER=/usr/local/bin

    - text: |
            The following variables will set which compiler and which python
            executable to use to build `cutils`.
            \\n\\n
            *Example configuration:*
      code: |
            \\OFF
            CC=gcc
            PYTHON=/usr/local/bin/python3

    - section: Install
      text: >
            Now, that everything is setup, there is only one step left: invoke
            the `makefile`. On some sytems you may need `super-user` privileges,
            so you have to use the `sudo` before the commands if the system is
            complaining about privileges.
      code: |
            \\OFF
            $ make
            $ make install

    - section: Create environment
      text: |
            If everything went fine, not only the modules and libs, but also all
            the command line utilities were installed as well. To test if that
            is true, you have to navigate to your `Documents` folder (or any
            other folder you prefer to build a project in) and run the following
            commands:
      code: |
            \\OFF
            $ cenv my_test_env my_test -cutils
            $ cd my_test_env

    - section: Write test
      text: >
            Now you can open `my_test.c` inside the `my_test_env` folder with
            your favourite text-editor of choice. Replace the automatically
            generated code block with the following lines:
      code: |
            #include <stdio.h>        /* stdout */
            #define CEXC_SET
            #include <cutils/call.h>
            \\n
            int main(void)
            {
                start_exception_handling(stdout);
                \\n
                DynamicArray_char_ptr *dynarr;
                new(&dynarr, 3, ((char*[]){"The best way to predict the"
                                           " future is to invent it.",
                                           "--", "Alan Kay"}));
                \\n
                for (size_t i=0; i<len(dynarr); i++)
                    debug("%s\n", get(dynarr, i));
                \\n
                del(dynarr);
                stop_exception_handling();
                \\n
                return 0;
            }

    - section: Run test
      text: |
            Now you can run this code with the generated `makefile`:
      code: |
            \\OFF
            $ make
            $ ./build/my_test



            # THE INC AND LIB FOLDERS NEEDS TO BE WRITTEN TO THE CENV !!!



  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - - Important notes
    - section: Error signals
      text: |
            Why the error-signal of functions on success is a value that can be
            evaluated to 'true' and if 'false' if failes? Wouldn't it be easier
            to write the explicit error checking like:
      code: if (some_method) return EXIT_FAILURE;

    - text: 'instead of:'
      code: if (!some_method) return EXIT_FAILURE;

    - text: |
            1) Most of the container-manipulation methods return the number
            of items they have manipulated, which evaluates to 'true' on success
            and 'false' on fail. So it makes more convenient and straightforward
            to use this kind of pattern in all cutils functions and methods
            \\n\\n
            2) it is more intuitive to return 'false' on failure than 'true'

#------------------------------------------------------------------------------#
USER:
  - - About
    - name: LICENSE
      info: |
            `cutils` is and always will be a free a software.
            \\n\\n
            Copyright Â© 2014 Peter Varo
            \\n\\n
            Permission is hereby granted, free of charge, to any person
            obtaining a copy of this software and associated documentation
            files (the "Software"), to deal in the Software without
            restriction, including without limitation the rights to use, copy,
            modify, merge, publish, distribute, sublicense, and/or sell copies
            of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:
            \\n\\n
            The above copyright notice and this permission notice shall be
            included in all copies or substantial portions of the Software.
            \\n\\n
            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
            EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
            NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
            HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
            WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
            DEALINGS IN THE SOFTWARE.
