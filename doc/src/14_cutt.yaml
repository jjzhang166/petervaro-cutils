## INFO ########################################################################
##                                                                            ##
##                                   cutils                                   ##
##                                   ======                                   ##
##                                                                            ##
##                     Modern and Lightweight C Utilities                     ##
##                       Version: 0.8.72.240 (20140708)                       ##
##                                                                            ##
##                         File: doc/src/14_cutt.yaml                         ##
##                                                                            ##
##           Designed and written by Peter Varo. Copyright (c) 2014           ##
##             License agreement is provided in the LICENSE file              ##
##                 For more info visit: http://www.cutils.org                 ##
##                                                                            ##
######################################################################## INFO ##

#------------------------------------------------------------------------------#
PAGE: CUTT Unit Testing Tools
NAME: cutt

#------------------------------------------------------------------------------#
HEAD:
  FILE: const/head.yaml

#------------------------------------------------------------------------------#
INFO:
  - - h1
    - string: 'CUTT | Unit Testing Tools'
  - - br
  - - p
    - string: |
              `cutt` is a minimal, single header-only unit testing system.

#------------------------------------------------------------------------------#
USER:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/name.yaml
    VARS:
      VAR_head: cutt
      VAR_func: report

#------------------------------------------------------------------------------#
TYPE:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: Tester
    info: This object collects the failure messages and locations.

#------------------------------------------------------------------------------#
FUNC:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - func: new
    args:
      - - Tester **
        - tester
      - - size_t
        - count
    info: >
          Creates a new [`Tester`](#type_Tester) object to the pointer the
          passed pointer is pointing at. The `count` argument indicates the
          number of [`try`](#func_try) functions calls in the test environment.
    examples:
      - - The following testing session has two test cases
        - |
          #include <cutils/cutt.h>
          #include <cutils/capi.h>
          \\n
          static void
          case1(Tester *tester)
          {
              try(tester, 1 == -1);
          }
          \\n
          static void
          case2(Tester *tester)
          {
              try(tester, 1 >= -1);
          }
          \\n
          int main(void)
          {
              Tester *tester;
              new(&tester, 2);
              \\n
              case1(tester);
              case2(tester);
              \\n
              report(tester);
              del(tester);
              \\n
              return 0;
          }
      - - OUTPUT
        - |
          \\OFF
          CUTT: Some tests (1 / 2) failed:
          CUTT: in file: 'main.c', at line: 7: '1 == -1'

      - - 'If all tests passed, the OUTPUT is:'
        - |
          \\OFF
          CUTT: All tests (10 / 10) passed.

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - func: del
    args:
      - - Tester *
        - tester
    info: |
          Removes the previously created [`Tester`](#type_Tester) object.
          \\n\\n
          *To see it in action, take a look at the example of the
          the [`new`](#func_new) function.*

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - func: try
    args:
      - - Tester *
        - tester
      - - bool
        - expression
    info: |
          Tests if the passed `expression` evaluates to `true` or `false`. If
          fails, stores the expression, and location of the expression in the
          [`Tester`](#type_Tester) object.
          \\n\\n
          *To see it in action, take a look at the example of the
          the [`new`](#func_new) function.*

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - func: report
    args:
      - - Tester *
        - tester
    info: |
          Get all th einformations from the [`Tester`](#type_Tester) object, and
          prints out the result of the test-session.
          \\n\\n
          *To see it in action, take a look at the example of the
          the [`new`](#func_new) function.*
