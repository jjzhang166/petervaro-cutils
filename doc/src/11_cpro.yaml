## INFO ##
## INFO ##

#------------------------------------------------------------------------------#
PAGE: CPRO Profiling
NAME: cpro

#------------------------------------------------------------------------------#
HEAD:
  FILE: const/head.yaml

#------------------------------------------------------------------------------#
INFO:
  - - h1
    - string: 'CPRO | Profiling'
  - - br
  - - p
    - string: |
              A very lightweight debugging/logging single header-only utility,
              contains a single function-like macro which can print its
              invocation place, a custom message or a formatted message with
              values to the standard error output.

#------------------------------------------------------------------------------#
USER:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/name.yaml
    VARS:
      VAR_head: cpro
      VAR_func: profile

#------------------------------------------------------------------------------#
FUNC:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - func: profile
    args:
      - - size_t
        - cycles
      - - double
        - time
      - - type(*
        - function
        - )()
      - - ''
        - ...

    info: |
          `profile` is a function-like macto, which calls `function`, `cycles`
          number of times and measures the time it takes to run, and writes
          the average time to `time`. If the `function` takes arguments, it can
          also be provided after the `function` argument.

    examples:
      - - ...
        - |
          #include <stdio.h>        /* printf() */
          #include <cutils/cpro.h>  /* profile() */
          \\n
          static void
          myfunction(unsigned long long *i)
          {
              unsigned long long x = *i;
              *i = (x*x + x/2 + x/3)/x;
          }
          \\n
          int main(void)
          {
              #define CYCLES 100000000
              double time;
              unsigned long long number = 16;
              \\n
              /* Run myfunction a hundred million times */
              profile(CYCLES, time, myfunction, &number);
              printf("To run 'myfunction' for %d times takes %lfs\n", CYCLES, time);
              \\n
              return 0;
          }

      - - OUTPUT
        - |
          \\OFF
          To run 'myfunction' for 100000000 times takes 4.901353s
