## INFO ########################################################################
##                                                                            ##
##                                   cutils                                   ##
##                                   ======                                   ##
##                                                                            ##
##                     Modern and Lightweight C Utilities                     ##
##                       Version: 0.8.90.680 (20140821)                       ##
##                                                                            ##
##                         File: doc/src/15_cdar.yaml                         ##
##                                                                            ##
##           Designed and written by Peter Varo. Copyright (c) 2014           ##
##             License agreement is provided in the LICENSE file              ##
##                 For more info visit: http://www.cutils.org                 ##
##                                                                            ##
######################################################################## INFO ##

# TODO: update all samples --> add error checking wether
#       method() was successful (new, append, etc.)
#
#           bool check;
#           check = method(...);
#           if (!check) return EXIT_FAILURE;

#------------------------------------------------------------------------------#
PAGE: CDAR Dynamic Array
NAME: cdar

#------------------------------------------------------------------------------#
HEAD:
  FILE: const/head.yaml

#------------------------------------------------------------------------------#
INFO:
  - - h1
    - string: CDAR | Dynamic Array
  - - br
  - - p
    - string: |
              Implementation of a dynamically allocated, and auto-sized array
              object and its methods.

#------------------------------------------------------------------------------#
USER:
  - - Options
    - FILE: const/name.yaml
      VARS:
        VAR_head: cdar
        VAR_func: append

  # TODO: finish dependings
  - - Depends
    - name: cexc.h
      info: >
            `cdar`'s methods can raise exceptions, if flag + h file provided

    - name: fmtc.h
      info: the internal character formatter header

    - name: fcmp.h
      info: the internal floating point numbers compare functions

  - - Compiler Flags
    - name: CDAR_JEM
      info: >
            Allocation functions using
            [jemalloc](http://www.canonware.com/jemalloc/) (dependency)

    - name: CDAR_OPT
      info: 'Most optimised: no bounds checking and no exceptions'

#------------------------------------------------------------------------------#
TYPE:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_char
    original: char

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_signed_char
    original: signed char

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_unsigned_char
    original: unsigned char

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_char_ptr
    original: char *

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_short
    original: short

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_unsigned_short
    original: unsigned short

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_int
    original: int

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_unsigned_int
    original: unsigned int

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_long
    original: long

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_unsigned_long
    original: unsigned long

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_long_long
    original: long long

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_unsigned_long_long
    original: unsigned long long

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_float
    original: float

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_double
    original: double

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_long_double
    original: long double

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_bool
    original: bool

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_size_t
    original: size_t

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_ptrdiff_t
    original: ptrdiff_t

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_void_ptr
    original: void *
    info: |
          This is the so-called universal array type, and also the base type of
          all the specific typed `DynamicArray`s. It holds `void *` type of
          items, therefore it can hold any kind of pointer to type. It has a
          slightly different [new](#func_new) function as well.
          \\n\\n
          `DyanmicArray` stores the items by their values (copies them), not
          only a pointer to them. For example if the array is a
          [`DynamicArray_int`](#type_DynamicArray_int) it will save a copy of
          the integers themselves inside itself. Also, if for example the array
          is a [`DynamicArray_void_ptr`](#type_DynamicArray_void_ptr) all the
          pointers will be copied and stored and pointing at the exact same
          memory location as the original pointers.

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - type: DynamicArray_String
    original: String
    info: >
          A dynamic array type, to contain [`String`](cstr.html) type of items.

  # #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  # - type: DynamicArray_DynamicArray_type
  #   original: DynamicArray_type
  #   info: >
  #         This is suitable for containing nested DynamicArray... A dynamic array
  #         type, to contain DynamicArray_type` type of items.

#------------------------------------------------------------------------------#
FUNC:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/function_new.yaml
    VARS:
      $object$: DynamicArray
      $variable$: dynamic_array
      $shortvar$: dynarr
      $type$: array
      $newline$: \\n\\n
      $extra$: "***Note:*** An empty `DynamicArray` with a preallocated space in
               memory can be created by passing the number of items and a
               pointer to `NULL` to the `new` function. *Example:*
               `new(&dynarr, 40, NULL);`"

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/function_del.yaml
    VARS:
      $object$: DynamicArray
      $variable$: dynamic_array

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/function_print.yaml
    VARS:
      $object$: DynamicArray
      $variable$: dynamic_array
      $shortvar$: dynarr
      $shortvar_space$: '      ' # Spacehack for 'dynarr'

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - func: data
    args:
      - - DynamicArray_type *
        - dynamic_array
      - - size_t *
        - byte_size
      - - size_t *
        - item_count

    return:
      - - type *
        - A properly casted pointer to the raw array data on success
      - - NULL
        - if one of the arguments are not valid

    info: >
          `data` is a type-generic function-like macro, which takes a pointer to
          a DynamicArray, and two pointers to `size_t`. Returns a properly
          casted pointer to the raw array, (except for `DynamicArray_void_ptr`,
          it returns a `void **`), and writes the byte size of all data stored
          in array to `byte_size` (Not the allocated memory size of the array)
          and the number of items stored in the array to `item_count`.

    exceptions:
      - FILE: const/exception_null_ptr.yaml
      - - 2nd argument is NULL
        - Function cannot write to a `NULL` pointer
      - - 3rd argument is NULL
        - Function cannot write to a `NULL` pointer

    examples:
      - - Get data of array
        - |
          /* Declare variables */
          size_t size, count;
          DynamicArray_float *dynarr;
          \\n
          /* Create array */
          new(&dynarr, 4, ((float[]){1.2f, 3.4f, 5.6f, 7.8f}));
          /* Get raw data and infos */
          float *array = data(dynarr, &size, &count);
          \\n
          /* Iterate through the raw data */
          printf("size of array: %zu byte(s)\n", size);
          for (size_t i=0; i<count; i++)
              printf("[%zu] %.1f\n", i, array[i]);
          del(dynarr);

      - - OUTPUT
        - |
          \\OFF
          size of array: 16 byte(s)
          [0] 1.2
          [1] 3.4
          [2] 5.6
          [3] 7.8

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - func: raw
    args:
      - - DynamicArray_type *
        - dynamic_array

    return:
      - - type *
        - A properly casted pointer to the raw array data on success
      - - NULL
        - if one of the arguments are not valid

    info: >
          `raw` is a type-generic function-like macro, which takes a pointer to
          a DynamicArray. Returns a properly casted pointer to the raw array,
          (except for `DynamicArray_void_ptr` it returns a `void **`).

    exceptions:
      - FILE: const/exception_null_ptr.yaml

    examples:
      - - Get raw data
        - |
          /* Declare variables */
          DynamicArray_char_ptr *dynarr;
          \\n
          /* Create array */
          new(&dynarr, 2, ((char *[]){(char *){"My God, it's full of stars"},
                                      (char *){"David Bowman"}}));
          /* Get and print raw data */
          printf("%s!\n", raw(dynarr)[0]);
          printf("-- %s\n", raw(dynarr)[1]);
          \\n
          /* Delete array */
          del(dynarr);

      - - OUTPUT
        - |
          \\OFF
          My God, it's full of stars!
          -- David Bowman

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/function_len.yaml
    VARS:
      $object$: DynamicArray
      $variable$: dynamic_array
      $shortvar$: dynarr
      $type$: array

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - func: size
    args:
      - - DynamicArray_type *
        - dynamic_array

    return:
      - - size_t
        - Byte size of the array

    info: |
          `size` is a type-generic function-like macro, which takes a pointer to
          a type-specific DynamicArray, and returns the byte size of all the
          items stored in the array. (Not the allocated memory size of the
          array). It is basically identical to something like this:
          \\n
          `size_t bytes = sizeof(item_type_in_array) * len(dynamic_array);`

    exceptions:
      - FILE: const/exception_null_ptr.yaml

    examples:
      - - Get and print byte size of an array
        - |
          DynamicArray_unsigned_long_long *dynarr;
          new(&dynarr, 4, ((unsigned long long[]){9ull, 8ull, 7ull, 6ull}));
          printf("Size of array: %zu byte(s)\n", size(dynarr));
          del(dynarr);

      - - OUTPUT
        - '\\OFFSize of array: 32 byte(s)'

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/function_clear.yaml
    VARS:
      $object$: DynamicArray
      $variable$: dynamic_array
      $shortvar$: dynarr
      $type$: array
      $extra$: "Because this function does not destroy the previously stored
                data, only makes the \"slots\" available to store new data again;
                and because it does not shrink the size of the array either, it
                is considered to be a good practice to clear an existing dynamic
                array if it is not in use anymore and use that array to store
                new data in it, so the array does not have to allocate the
                memory again, therefore it is more efficient in speed, but
                probably takes more space in the memory."

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - func: resize
    args:
      - - DynamicArray_type *
        - dynamic_array
      - - size_t
        - item_count

    return:
      - - bool
      - - true
        - if array already has the given size, or if reallocation was successful
      - - false
        - if array was not initialised or the internal allocation failed'

    info: >
          `resize` is a type-generic function-like macro, which takes a pointer
          to a type-specific DynamicArray, and the preferred size of the
          array (the number of items it should take without continous
          reallocation) and forces the array to pre-allocate enough space for
          the given amount of elements. If the preferred size is lesser than
          the current size of the array, the array will be truncated.

    exceptions:
      - - array is not initialised
        - function cannot operate on `NULL` pointer

      - - internal reallocation failed
        - reallocating the data in memory failed

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/function_swap.yaml
    VARS:
      $object$: DynamicArray
      $variable$: dynamic_array
      $shortvar$: dynarr
      $type$: array

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/function_reverse.yaml
    VARS:
      $object$: DynamicArray
      $variable$: dynamic_array
      $shortvar$: dynarr
      $type$: array

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/function_append.yaml
    VARS:
      $object$: DynamicArray
      $variable$: dynamic_array
      $shortvar$: dynarr
      $type$: array
      $shortvar_space$: '      ' # Spacehack for 'dynarr'

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/function_push.yaml
    VARS:
      $object$: DynamicArray
      $variable$: dynamic_array
      $shortvar$: dynarr
      $type$: array

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/function_pull.yaml
    VARS:
      $object$: DynamicArray
      $variable$: dynamic_array
      $shortvar$: dynarr
      $type$: array

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/function_pop.yaml
    VARS:
      $object$: DynamicArray
      $variable$: dynamic_array
      $shortvar$: dynarr
      $type$: array

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/function_sub.yaml
    VARS:
      $object$: DynamicArray
      $variable$: dynamic_array
      $shortvar$: dynarr
      $type$: array

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/function_truncate.yaml
    VARS:
      $object$: DynamicArray
      $variable$: dynamic_array
      $shortvar$: dynarr
      $type$: array

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/function_set.yaml
    VARS:
      $object$: DynamicArray
      $variable$: dynamic_array
      $shortvar$: dynarr
      $type$: array

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/function_get.yaml
    VARS:
      $object$: DynamicArray
      $variable$: dynamic_array
      $shortvar$: dynarr
      $type$: array

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/function_map.yaml
    VARS:
      $object$: DynamicArray
      $variable$: dynamic_array
      $shortvar$: dynarr
      $type$: array

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/function_find.yaml
    VARS:
      $object$: DynamicArray
      $variable$: dynamic_array
      $shortvar$: dynarr
      $type$: array

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/function_findall.yaml
    VARS:
      $object$: DynamicArray
      $variable$: dynamic_array
      $shortvar$: dynarr
      $type$: array
