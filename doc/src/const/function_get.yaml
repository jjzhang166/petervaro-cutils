func: get
args:
  - - $object$_type *
    - $variable$
  - - size_t
    - index

return:
  - - type *
    - returns a properly casted to type item
  - - NULL
    - if pointer to arrat is `NULL`
  - - NULL
    - if $type$ is empty
  - - NULL
    - if `index` is out of range

info: >
      `get` is a type-generic function-like macro, which takes a pointer
      to a type-specific $object$ and an index. It returns a properly
      casted to type item, except for `$object$_void_ptr`, where it
      returns a pointer to the pointer stored in the $type$.

exceptions:
  - FILE: const/exception_null_ptr.yaml
  - FILE: const/exception_empty.yaml
  - - 2nd argument is out of range
    - if the `index` argument is out of range

examples:
  - - Get each `float` and the next one from the $type$ and add them
    - |
      /* Create $type$ */
      #define SIZE 4
      $object$_float *$shortvar$;
      new(&$shortvar$, SIZE, ((float[]){4.78, 99., 13.62, .123}));
      print($shortvar$);
      \\n
      /* Add together all items and their neighbours from the $type$ */
      float a, b;
      for (size_t i=0; i<SIZE - 1; i++)
      {
          a = get($shortvar$, i);
          b = get($shortvar$, i + 1);
          printf("%.2f + %.2f = %.2f\n", a, b, a + b);
      }
      \\n
      /* Delete $type$ */
      del($shortvar$);

  - - OUTPUT
    - |
      \\OFF
      $object$_float{4.780000, 99.000000, 13.620000, 0.123000}
      4.78 + 99.00 = 103.78
      99.00 + 13.62 = 112.62
      13.62 + 0.12 = 13.74
