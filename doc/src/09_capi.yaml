## INFO ########################################################################
##                                                                            ##
##                                   cutils                                   ##
##                                   ======                                   ##
##                                                                            ##
##                     Modern and Lightweight C Utilities                     ##
##                       Version: 0.8.90.536 (20140820)                       ##
##                                                                            ##
##                         File: doc/src/09_capi.yaml                         ##
##                                                                            ##
##   For more information about the project, visit <http://www.cutils.org>.   ##
##                       Copyright (C) 2014 Peter Varo                        ##
##                                                                            ##
##  This program is free software: you can redistribute it and/or modify it   ##
##   under the terms of the GNU General Public License as published by the    ##
##       Free Software Foundation, either version 3 of the License, or        ##
##                    (at your option) any later version.                     ##
##                                                                            ##
##    This program is distributed in the hope that it will be useful, but     ##
##         WITHOUT ANY WARRANTY; without even the implied warranty of         ##
##            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.            ##
##            See the GNU General Public License for more details.            ##
##                                                                            ##
##     You should have received a copy of the GNU General Public License      ##
##     along with this program, most likely a file in the root directory,     ##
##        called 'LICENSE'. If not, see <http://www.gnu.org/licenses>.        ##
##                                                                            ##
######################################################################## INFO ##

#------------------------------------------------------------------------------#
PAGE: CAPI Interface
NAME: capi

#------------------------------------------------------------------------------#
HEAD:
  FILE: const/head.yaml

#------------------------------------------------------------------------------#
INFO:
  - - h1
    - string: 'CAPI | Interface'
  - - br
  - - p
    - string: |
              `capi` is the "interface" header of all other `cutils` headers. It
              provides the name-mangling option, also the short

#------------------------------------------------------------------------------#
USER:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - - Dependencies
    - name: carg.h
      info: |
            `capi` heavily uses `carg.h`'s `vargs` macro to dispatch between
            the different number of arguments passed to a function call, which
            makes it possible to use default values and therefore shorthands in
            function calls.

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - - Usage
    - name: Include The Interface
      info: |
            One of the best features of `cutils` is it's modern interface
            approach, which makes it possible to use short function and macro
            names, also possible to overload these names, and let the compiler
            choose th eproper functions type-safely.
            \\n\\n
            `capi` also prevents name-collison as it can add the `cutils_`
            prefix to all the types, macros, function-like macros and functions.
      examples:
      - - Without including `capi.h`
        - |
          #include <cutils/cbug.h>
          #include <cutils/cstr.h>
          #include <cutils/cdar.h>
          #include <cutils/csll.h>
          \\n
          int main(void)
          {
              cutils_cbug_debug("kill long token names!");
              \\n
              cutils_cstr_String *string;
              cutils_cdar_DynamicArray_unsigned_long_long *dynarr;
              cutils_csll_SingleLinkedList_double *linlist;
              \\n
              cutils_cstr_String_new(&string, "the interface of cutils rocks!");
              cutils_cdar_DynamicArray_unsigned_long_long_new(&dynarr);
              cutils_csll_SingleLinkedList_double_new(&linlist, 2, (double[]){0.0, 1.0});
              \\n
              cutils_cstr_String_del(string);
              cutils_cdar_DynamicArray_unsigned_long_long_del(dynarr);
              cutils_csll_SingleLinkedList_double_del(linlist);
              \\n
              return 0;
          }
      - - With including `capi.h`
        - |
          #include <cutils/cbug.h>
          #include <cutils/cstr.h>
          #include <cutils/cdar.h>
          #include <cutils/csll.h>
          #include <cutils/capi.h>
          \\n
          int main(void)
          {
              debug("kill long token names!");
              \\n
              String *string;
              DynamicArray_unsigned_long_long *dynarr;
              SingleLinkedList_double *linlist;
              \\n
              new(&string, "the interface of cutils rocks!");
              new(&dynarr);
              new(&linlist, 2, ((double[]){0.0, 1.0}));
              \\n
              del(string);
              del(dynarr);
              del(linlist);
              \\n
              return 0;
          }
      - - With including `capi.h` and `CUTILS_NAMESPACE` "turned on"
        - |
          #include <cutils/cbug.h>
          #include <cutils/cstr.h>
          #include <cutils/cdar.h>
          #include <cutils/csll.h>
          #define CUTILS_NAMESPACE
          #include <cutils/capi.h>
          \\n
          int main(void)
          {
              cutils_debug("kill long token names!");
              \\n
              cutils_String *string;
              cutils_DynamicArray_unsigned_long_long *dynarr;
              cutils_SingleLinkedList_double *linlist;
              \\n
              cutils_new(&string, "the interface of cutils rocks!");
              cutils_new(&dynarr);
              cutils_new(&linlist, 2, ((double[]){0.0, 1.0});
              \\n
              cutils_del(string);
              cutils_del(dynarr);
              cutils_del(linlist);
              \\n
              return 0;
          }
