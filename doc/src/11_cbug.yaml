## INFO ########################################################################
##                                                                            ##
##                                   cutils                                   ##
##                                   ======                                   ##
##                                                                            ##
##                     Modern and Lightweight C Utilities                     ##
##                       Version: 0.8.72.240 (20140708)                       ##
##                                                                            ##
##                         File: doc/src/11_cbug.yaml                         ##
##                                                                            ##
##           Designed and written by Peter Varo. Copyright (c) 2014           ##
##             License agreement is provided in the LICENSE file              ##
##                 For more info visit: http://www.cutils.org                 ##
##                                                                            ##
######################################################################## INFO ##

#------------------------------------------------------------------------------#
PAGE: 'CBUG Debugging & Logging'
NAME: cbug

#------------------------------------------------------------------------------#
HEAD:
  FILE: const/head.yaml

#------------------------------------------------------------------------------#
INFO:
  - - h1
    - string: 'CBUG | Debugging and Logging'
  - - br
  - - p
    - string: |
              A very lightweight debugging/logging single header-only utility,
              contains a single function-like macro which can print its
              invocation place, a custom message or a formatted message with
              values to the standard error output.

#------------------------------------------------------------------------------#
USER:
  - FILE: const/name.yaml
    VARS:
      VAR_head: cbug
      VAR_func: debug
  - - Flags
    - name: CBUG_OFF
      info: |
            The `debug` macro can be turned off by defining an empty `CBUG_OFF`
            macro variable before the include macro statement or by compiling
            the the code with a `-DCBUG_OFF` flag. If this variable is defined
            all the apperences of the `debug` macro will be removed from the
            source file.
      examples:
        - - Defining variable before inclusion
          - |
            #define CBUG_OFF
            #include <cutils/cbug.h>
            #undef CBUG_OFF

#------------------------------------------------------------------------------#
FUNC:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - func: debug
    vargs:
      - - - void
          - ''
      - - - char *
          - message
      - - - String
          - message
      - - - char *
          - format_string
        - - ''
          - ...

    info: |
          `debug` has its own internal counter, which is scope based. (This
          means, that each invocaition place's scope has its own counter.)
          This counter increases each time when the function-like macro is
          called. `debug` prints the value of the counter and the location
          informations from where it was called.
          \\n\\n
          `debug` can be called with a single argument, which has to be a
          `char *` string. This message will be indented and printed out after
          the default debugging line.
          \\n\\n
          `debug` also can be called with 2+ arguments (up to 63 in total). In
          this case the first argument has to be a format-string and all the
          other arguments can be any type specified in the format-string. It
          works exactly as the standard library's `printf` function. The
          formatted message will be indented and printed out after the default
          debugging line.

    examples:
      - - Calling `debug` in all 3 forms from the main function
        - |
          #include <stdio.h>        /* fprintf(), stderr */
          #include <cutils/cbug.h>  /* debug() */
          #include <cutils/capi.h>
          \\n
          int main(void)
          {
              for (int i=0; i<3; i++)
              {
                  fprintf(stderr, "- - - - -\n");
                  debug();
                  debug("I'm debugging...");
                  debug("Value of i is: %d", i);
              }
              return 0;
          }
      - - OUTPUT
        - |
          \\OFF
          - - - - -
          000 File: 'main.c', line: 9, function: 'main'
          001 File: 'main.c', line: 10, function: 'main'
              "I'm debugging..."
          002 File: 'main.c', line: 11, function: 'main'
              "Value of i is: 0"
          - - - - -
          003 File: 'main.c', line: 9, function: 'main'
          004 File: 'main.c', line: 10, function: 'main'
              "I'm debugging..."
          005 File: 'main.c', line: 11, function: 'main'
              "Value of i is: 1"
          - - - - -
          006 File: 'main.c', line: 9, function: 'main'
          007 File: 'main.c', line: 10, function: 'main'
              "I'm debugging..."
          008 File: 'main.c', line: 11, function: 'main'
              "Value of i is: 2"

      - - >
          Another great usecase of `debug` is to extend the functionality of the
          [`cexc`](cexc.html) utility. While the handling mode is set to
          logging, so the exceptions are printed out to `stderr` for example,
          `debug` can print the exact file location. This can be seen in the
          next example
        - |
          #include <stdio.h>        /* stderr */
          #define CEXC_LOG
          #include <cutils/cexc.h>  /* (start|stop)_exception_handling(), raise() */
          #include <cutils/cbug.h>  /* debug() */
          #include <cutils/capi.h>
          \\n
          void func(void *ptr)
          {
              if (ptr != NULL)
                  return;
              debug();
              #define MSG "Pointer is NULL"
              raise(MSG, sizeof MSG);
          }
          \\n
          int main(void)
          {
              start_exception_handling(stderr);
              \\n
              func(NULL);
              \\n
              stop_exception_handling();
              return 0;
          }
      - - OUTPUT
        - |
          \\OFF
          000 File: 'main.c', line: 10, function: 'func'
          EXCEPTION: Pointer is NULL
