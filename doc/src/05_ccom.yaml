## INFO ########################################################################
##                                                                            ##
##                                   cutils                                   ##
##                                   ======                                   ##
##                                                                            ##
##                     Modern and Lightweight C Utilities                     ##
##                       Version: 0.8.72.209 (20140708)                       ##
##                                                                            ##
##                         File: doc/src/05_ccom.yaml                         ##
##                                                                            ##
##           Designed and written by Peter Varo. Copyright (c) 2014           ##
##             License agreement is provided in the LICENSE file              ##
##                 For more info visit: http://www.cutils.org                 ##
##                                                                            ##
######################################################################## INFO ##

#------------------------------------------------------------------------------#
PAGE: CCOM Comment Scanner
NAME: ccom

#------------------------------------------------------------------------------#
HEAD:
  FILE: const/head.yaml

#------------------------------------------------------------------------------#
INFO:
  - - h1
    - string: 'CCOM | Comment Scanner'
  - - br
  - - p
    - string: |
              This small utility let you scan all your source files very quickly
              and search for specific comments, collect them and organise them
              into a readable, but also yaml-ready file.

#------------------------------------------------------------------------------#
USER:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/python.yaml
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - - Usage
    - name: Command Line Tool
      info: >
            Scans `C` header and implementation files, `Python` source files,
            `OpenGL` shader files and `YAML` files, searching for comments
            start with `fixme:`, `todo:`, `bug:`, `hack:`, `note:`, `xxx:`,
            `!!!` and `???` (ignoring letter-cases for these keywords) and
            generates a well organised and nicely formatted list and writes it
            into a `YAML` compatible file anme `TODO`.
            \\n\\n
            `ccom` can also be used as `Python` module to customise the
            keywords, the symbols of line and block comments or the extension
            of the files to scan. This makes `ccom` really powerful -- it can be
            used for any kind of language. This can be achieved with the
            [`ccom.collect`](#func_ccom_collect) function.
            \\n\\n
            `ccom` will measure the distance from the line-start to the first
            non-keyword line's first character and uses that distance as the
            absolute left value: all indentations of the other lines will be
            compared to this column index.
            \\n\\n
            If a line has lower column index, it will be increased to get the
            same value as the first line has, otherwise the indentation will
            be reserved as it is.
            \\n\\n
            Line-comments are treated as a block until a non commented line
            comes next.

      examples:
        - - |
            Use it as a command line utility, passing the current folder to it.
            **Note:** the `TODO` file will be generated to this folder too
          - \\OFF$ python3 ccom.py .

        - - Here is an example, of a line and a block comments collected
          - |
            int main(void)
            {
                #define WIZARD "Albus Percival Wulfric Brian Dumbledore"
                struct
                {
                    /* note: length of the char
                             array stored in string */
                    size_t length;
                    \\n
                    // fixme: We need to use the String
                    //        "object" of cutils here
                    //        instead of this simple struct
                    const char *string;
                \\n
                } Wizard = {.length = sizeof WIZARD,
                            .string  = WIZARD};
                \\n
                return 0;
            }

        - - '`ccom` will produce the follwoing `TODO` file from this'
          - |
            \\OFF
            #----------------------------- 1 POSTS IN 1 FILES -----------------------------#
            FIXME:
              #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
              # 1
              - file: main.c
                line: 10
                note: |
                      We need to use the String
                      "object" of cutils here
                      instead of this simple struct
            \\n\\n\\n\\n
            #----------------------------- 1 POSTS IN 1 FILES -----------------------------#
            NOTE:
              #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
              # 1
              - file: main.c
                line: 6
                note: |
                      length of the char
                      array stored in string

#------------------------------------------------------------------------------#
FUNC:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - func: ccom.collect
    args:
      - - str
        - path
      - - iterable of strs
        - line
      - - dict
        - block
      - - iterable of strs
        - words
      - - dict
        - marks
      - - iterable of strs
        - extensions
    info: |
          `ccom` can also be used as a module, to customise which comment
          symbols, "magic" words and marks to capture or to set the extensions
          of file types it will scan.

    examples:
      - - >
          Use `ccom.collect` to capture comments start with `'note'`, `'bug'`,
          `'fixme'` and `'***'` special words and marks written in
          AppleScript, Python and HTML languages
        - |
          \\OFF
          from ccom import collect
          \\n
          collect(path  = '.',
                  line  = ('--', '#'),
                  block = {'(*': '*)', '<!--': '-->'},
                  words = ('note', 'bug', 'fixme'),
                  marks = {'***': 'section'},
                  extensions = ('.scpt', '.py', '.html'))

      - - So the this call will capture these
        - |
          \\OFF
          -- note: one liner in AppleScript
          --       and this second line too!
          \\n
          # *** one liner section indicator in python ***
          \\n
          <!-- bug: an HTML
                    multiliner -->
          \\n
          (* fixme: multiliner description
                    in this AppleScript *)
