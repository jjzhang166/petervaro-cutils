## INFO ########################################################################
##                                                                            ##
##                                   cutils                                   ##
##                                   ======                                   ##
##                                                                            ##
##                     Modern and Lightweight C Utilities                     ##
##                       Version: 0.8.90.506 (20140819)                       ##
##                                                                            ##
##                         File: doc/src/20_cfps.yaml                         ##
##                                                                            ##
##   For more information about the project, visit <http://www.cutils.org>.   ##
##                       Copyright (C) 2014 Peter Varo                        ##
##                                                                            ##
##  This program is free software: you can redistribute it and/or modify it   ##
##   under the terms of the GNU General Public License as published by the    ##
##       Free Software Foundation, either version 3 of the License, or        ##
##                    (at your option) any later version.                     ##
##                                                                            ##
##    This program is distributed in the hope that it will be useful, but     ##
##         WITHOUT ANY WARRANTY; without even the implied warranty of         ##
##            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.            ##
##            See the GNU General Public License for more details.            ##
##                                                                            ##
##     You should have received a copy of the GNU General Public License      ##
##     along with this program, most likely a file in the root directory,     ##
##        called 'LICENSE'. If not, see <http://www.gnu.org/licenses>.        ##
##                                                                            ##
######################################################################## INFO ##

#------------------------------------------------------------------------------#
PAGE: CFPS Frame Per Second
NAME: cfps

#------------------------------------------------------------------------------#
HEAD:
  FILE: const/head.yaml

#------------------------------------------------------------------------------#
INFO:
  - - h1
    - string: 'CFPS | Frame Per Second'
  - - br
  - - p
    - string: |
              A single header-only frame per second counter. It implements an
              inline functions and a macro wrapper around that.

#------------------------------------------------------------------------------#
USER:
  - - Options
    - FILE: const/name.yaml
      VARS:
        VAR_head: cfps
        VAR_func: printfps

#------------------------------------------------------------------------------#
FUNC:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - func: printfps
    args:
      - - double(*
        - timer_func
        - )(void)
    info: |
          `printfps` is a function-like macro, which wraps the
          [`getfps`](#func_getfps) function. It requires a timer function
          `timer_func` as it's only argument which has to return a `double`
          value. It prints the frame per second value to the standard `stdout`
          stream.
    examples:
      - - The next example prints the fps to the `stdout`
        - |
          #include <GLFW/glfw3.h>   /* glfw...(), GLFW... */
          #include <cutils/cfps.h>  /* printfps() */
          #include <cutils/capi.h>
          \\n
          /* ... GLFW setup */
          \\n
          glfwSwapInterval(0);
          void run(GLFWwindow *window)
          {
              while (!glfwWindowShouldClouse(window))
              {
                  /* ... Draw something */
                  \\n
                  glfwSwapBuffers(window);
                  glfwPollEvents();
                  \\n
                  printfps(glfwGetTime);
              }
          }

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - func: getfps
    args:
      - - double(*
        - timer_func
        - )(void)
      - - void(*
        - handler_func
        - )(int,void*)
      - - void *
        - data
    info: |
          It is a more general purpose fps function. It also requires a timer
          function which returns a double value, but it also requires a handler
          function, which will be called on every second; and a pointer to any
          kind of data, which will be passed to the handler function, to deal
          with it.
    examples:
      - - >
          The next example shows how to use `getfps` with GLFW to set the title
          of the window to show the actual frame per second value
        - |
          #include <stdio.h>        /* snprintf() */
          #include <GLFW/glfw3.h>   /* glfw...(), GLFW... */
          #include <cutils/cfps.h>  /* getfps() */
          #include <cutils/capi.h>
          \\n
          static void fps_title_setter(int fps, void *data)
          {
              void **array = (void **)data;
              char *buffer = (char *)(array[1]);
              snprintf(buffer, *((int *)(array[2])), "[FPS: %d]", fps);
              glfwSetWindowTitle((GLFWwindow *)(array[0]), buffer);
          }
          \\n
          /* ... GLFW setup */
          \\n
          void run(GLFWwindow *window)
          {
              char fps_title_txt[10];
              int  fps_title_len = 10;
              void *data[] = {window, fps_title_txt, &fps_title_len};
              \\n
              glfwSwapInterval(0);
              while (!glfwWindowShouldClose(window))
              {
                  /* ... Draw something */
                  \\n
                  glfwSwapBuffers(window);
                  glfwPollEvents();
                  \\n
                  getfps(glfwGetTime, fps_title_setter, &data);
              }
          }
