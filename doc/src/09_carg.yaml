## INFO ########################################################################
##                                                                            ##
##                                   cutils                                   ##
##                                   ======                                   ##
##                                                                            ##
##                     Modern and Lightweight C Utilities                     ##
##                       Version: 0.8.72.026 (20140706)                       ##
##                                                                            ##
##                         File: doc/src/09_carg.yaml                         ##
##                                                                            ##
##           Designed and written by Peter Varo. Copyright (c) 2014           ##
##             License agreement is provided in the LICENSE file              ##
##                 For more info visit: http://www.cutils.org                 ##
##                                                                            ##
######################################################################## INFO ##

#------------------------------------------------------------------------------#
PAGE: 'CARG Variadic Argument Macro'
NAME: carg

#------------------------------------------------------------------------------#
HEAD:
  FILE: const/head.yaml

#------------------------------------------------------------------------------#
INFO:
  - - h1
    - string: 'CARG | Variadic Argument Macro'
  - - br
  - - p
    - string: |
              This single-header module contains a single helper macro called
              `vargs`. Its aim is to simplify the implementation of variadic
              argument count based dispatching APIs in C which supports 0 or
              more arguments passed to the dispatcher.

#------------------------------------------------------------------------------#
USER:
  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - FILE: const/name.yaml
    VARS:
      VAR_head: carg
      VAR_func: vargs

  #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
  - - Macros
    - name: vargs
      info: |
            This macro helps implementing variadic argument based macros easily.
            It can handle 0 to 63 arguments, and it is capable of deciding which
            macro to call at compile time.
            \\n\\n
            Using `vargs` may looks a bit tricky, as its functionality is very
            complex, and calling it once does not enough. One has to call it
            four times as the first example shows it, to make it work.
      examples:
        - - |
            Syntax/Usage of `vargs`.
            \\n\\n
            Note: In this example, `x` represents the name of function-like
            macros or functions. However, it is using indices as suffixes, it is
            doing that only to indicate the proper order of the tokens.
            Otherwise `x` can be any valid token-name.
          - |
            vargs(__VA_ARGS__)(N)(__VA_ARGS__, x0, x(N - 1), ..., x1)(__VA_ARGS__)
            /*         ^       ^       ^        ^      ^          ^        ^
             *         |       |       |        |      |          |        |
             *      test if    |   dispatch     |      |     with lowest   |
             *       empty     |                |      |      number of    |
             *                 |             without   |      arguments    |
             *              number of       arguments  |                   |
             *          macros/functions               |                 passing
             *                                with highest number       arguments
             *                                    of arguments
             */

        - - >
            This basic example demonstrates how to create a dispather using
            `vargs`, to choose which macro/function to call if 0, 1 or 2
            arguments were passed
          - |
            #include <cutils/carg.h>
            \\n
            #define nil_arg() printf("No arguments passed\n")
            \\n
            static int
            one_arg(int i)
            {
                printf("One argument passed: %d\n", i);
                return --i;
            }
            \\n
            static int
            two_args(const char *str1,
                     const char *str2)
            {
                printf("Two arguments passed: '%s', '%s'\n", str1, str2);
                return 0;
            }
            \\n
            // Using vargs to select the proper macro/function to call:
            #define dispatch(...) \
                vargs(__VA_ARGS__)(3)(__VA_ARGS__, nil_arg, two_args, one_arg)(__VA_ARGS__)
            \\n
            int main(void)
            {
                dispatch();
                int i = dispatch(12);
                dispatch("cutils", "rocks!");
                return 0;
            }

        - - OUTPUT
          - |
            \\OFF
            No arguments passed
            One argument passed: 12
            Two arguments passed: 'cutils', 'rocks!'

    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    - name: zero
      info: |
            If the range is not complete — for example there are func1, func2
            and func5, but no func0, func3 and func4 — the best practice is to
            provide the function with the greater number of arguments as a
            replacement, so the compiler can warn the user if too few or too
            many arguments were passed to the dispatcher.
            \\n\\n
            There is only one exception: since the compiler can't decide whether
            a the macro is called with a single or without any argument, the
            `carg` module provides a `zero` macro, which is aliasing a simple
            function, that is not doing anything, but needs a single argument.
            With this hack, the compiler will warn the user about passing too
            few arguments to this function-like macro
      examples:
        - - >
            Fill the missing functions with a "greater" one and use the `zero`
            to catch the "no arguments passed" calling
          - |
            #define func(...)                                        \
                vargs(__VA_ARGS__)(6)(__VA_ARGS__, zero,             \
                                                   func5,            \
                                                   func5,            \
                                                   func5,            \
                                                   func2,            \
                                                   func1)(__VA_ARGS__)
            \\n
            /*    func()                   -> too few arguments
             *    func(a)                  -> func1()
             *    func(a, b)               -> func2()
             *    func(a, b, c)            -> too few arguments
             *    func(a, b, c, d)         -> too few arguments
             *    func(a, b, c, d, e)      -> func5
             *    func(a, b, c, d, e, ...) -> too many arguments
             */
